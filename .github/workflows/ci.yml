name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_RESOURCE_GROUP: dev-voice-kani-rg #${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_CONTAINERAPP_NAME: voice-kani #${{ secrets.AZURE_CONTAINERAPP_NAME }}
  AZURE_CONTAINERAPPS_ENVIRONMENT: managedEnvironment-devvoicekanirg-a747 #${{ secrets.AZURE_CONTAINERAPPS_ENVIRONMENT }}
  AZURE_CONTAINER_REGISTRY: mardan #${{ secrets.AZURE_CONTAINER_REGISTRY }}
  AZURE_CONTAINER_NAME: voice-kani

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test:ci
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Analyze bundle
        run: npm run analyze
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next/

  deploy-staging:
    name: Deploy to Staging (PR)
    if: github.event_name == 'pull_request'
    needs: [lint, test, build]
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
      - name: Set PR revision suffix and image tag
        id: pr-revision
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          SHORT_SHA=$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-7)
          REVISION_SUFFIX="pr-$PR_NUMBER-$SHORT_SHA"
          IMAGE_TAG="${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/voice-kani:$REVISION_SUFFIX"
          echo "revision_suffix=$REVISION_SUFFIX" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.pr-revision.outputs.image_tag }}
      - name: Ensure revisions mode is multiple
        run: |
          az containerapp revision set-mode \
            --name ${{ env.AZURE_CONTAINERAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --mode multiple
      - name: Deploy PR revision
        run: |
          az containerapp update \
            --name ${{ env.AZURE_CONTAINERAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ steps.pr-revision.outputs.image_tag }} \
            --container-name voice-kani \
            --revision-suffix ${{ steps.pr-revision.outputs.revision_suffix }} \
            --set configuration.ingress.targetPort=3000
      - name: Get PR revision FQDN
        id: pr-fqdn
        run: |
          REVISION_NAME="${{ env.AZURE_CONTAINERAPP_NAME }}--${{ steps.pr-revision.outputs.revision_suffix }}"
          FQDN=$(az containerapp revision show \
            --name ${{ env.AZURE_CONTAINERAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --revision $REVISION_NAME \
            --query properties.fqdn -o tsv)
          echo "fqdn=https://$FQDN" >> $GITHUB_OUTPUT
      - name: Comment PR with staging URL
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **Staging deployment ready!**\n\n' +
                    '📍 **Staging URL:** ${{ steps.pr-fqdn.outputs.fqdn }}\n' +
                    '🏷️ **Revision Suffix:** `${{ steps.pr-revision.outputs.revision_suffix }}`\n\n' +
                    'Test your changes and provide feedback!'
            })

      - name: Notify Slack
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "🚀 Staging Deployment",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:*\nStaging"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*PR:*\n#${{ github.event.pull_request.number }}"
                  }
                ]
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Revision Suffix:*\n${{ steps.pr-revision.outputs.revision_suffix }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit:*\n${{ github.sha }}"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Staging",
                      "emoji": true
                    },
                    "url": "${{ steps.pr-fqdn.outputs.fqdn }}"
                  },
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View PR",
                      "emoji": true
                    },
                    "url": "${{ github.event.pull_request.html_url }}"
                  }
                ]
              }
            ]
          }' $SLACK_WEBHOOK_URL

  deploy-production:
    name: Deploy to Production (Canary)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [lint, test, build]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Set canary revision suffix and image tag
        id: revision
        run: |
          REVISION_SUFFIX="canary-$(date +%s)"
          IMAGE_TAG="${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/voice-kani:${REVISION_SUFFIX}"
          echo "revision_suffix=${REVISION_SUFFIX}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Revision suffix: ${REVISION_SUFFIX}"
          echo "Image tag: ${IMAGE_TAG}"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.revision.outputs.image_tag }}

      - name: Deploy to Azure Container Apps (Production)
        run: |
          az containerapp update \
            --name ${{ env.AZURE_CONTAINERAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ steps.revision.outputs.image_tag }} \
            --container-name voice-kani
        env:
          AZURE_RESOURCE_GROUP: ${{ env.AZURE_RESOURCE_GROUP }}
          AZURE_CONTAINERAPP_NAME: ${{ env.AZURE_CONTAINERAPP_NAME }}
          AZURE_CONTAINERAPPS_ENVIRONMENT: ${{ env.AZURE_CONTAINERAPPS_ENVIRONMENT }}
          AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
          AZURE_CONTAINER_NAME: voice-kani
          DOCKER_CONFIG: ${{ env.DOCKER_CONFIG }}

      - name: Notify Slack
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "🎉 Production Deployment",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:*\nProduction"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Type:*\nCanary Deployment"
                  }
                ]
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Revision:*\n${{ steps.revision.outputs.revision_suffix }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit:*\n${{ github.sha }}"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Production",
                      "emoji": true
                    },
                    "url": "https://${{ env.AZURE_CONTAINERAPP_NAME }}.${{ env.AZURE_CONTAINERAPPS_ENVIRONMENT }}.azurecontainerapps.io"
                  }
                ]
              }
            ]
          }' $SLACK_WEBHOOK_URL

  cleanup-staging:
    name: Cleanup Staging Slots
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
      - name: Deactivate PR revision
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          SHORT_SHA=$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-7)
          REVISION_SUFFIX="pr-$PR_NUMBER-$SHORT_SHA"
          REVISION_NAME="${{ env.AZURE_CONTAINERAPP_NAME }}--$REVISION_SUFFIX"
          az containerapp revision deactivate \
            --name ${{ env.AZURE_CONTAINERAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --revision "$REVISION_NAME" || true
